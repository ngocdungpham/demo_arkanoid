{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"my",
				"myTree"
			],
			[
				"is",
				"isEmpty"
			],
			[
				"Q",
				"Queue"
			],
			[
				"ne",
				"newNode"
			],
			[
				"d",
				"dx_curr"
			],
			[
				"in",
				"index"
			],
			[
				"nw",
				"new_dy"
			],
			[
				"n",
				"new_dy"
			],
			[
				"co",
				"count_triplets"
			],
			[
				"li",
				"linkedList"
			],
			[
				"In",
				"Insert"
			],
			[
				"new",
				"newDy_"
			],
			[
				"s",
				"solve"
			],
			[
				"le",
				"element"
			],
			[
				"e",
				"element"
			],
			[
				"el",
				"element"
			],
			[
				"can",
				"canAllocate"
			],
			[
				"find",
				"findMinHard"
			],
			[
				"la",
				"last_position"
			],
			[
				"se",
				"searchMatrix"
			],
			[
				"l",
				"lastIndex"
			],
			[
				"f",
				"firstIndex"
			],
			[
				"p",
				"paper_counts"
			],
			[
				"epo",
				"epochs"
			],
			[
				"Y",
				"astype"
			],
			[
				"a",
				"astype"
			],
			[
				"Glo",
				"GlobalMin"
			],
			[
				"Cu",
				"CurrMax"
			],
			[
				"t",
				"total"
			],
			[
				"G",
				"GlobalMin"
			],
			[
				"cu",
				"CurrMin"
			],
			[
				"res",
				"resMax"
			],
			[
				"tem",
				"team2"
			],
			[
				"tea",
				"team1"
			],
			[
				"te",
				"team2"
			],
			[
				"si",
				"Sinh_to_hop"
			],
			[
				"c",
				"color"
			],
			[
				"di",
				"diagonalExtra"
			],
			[
				"B",
				"B_right"
			],
			[
				"A",
				"A_right"
			],
			[
				"m",
				"mergeTwoLists"
			],
			[
				"gr",
				"groupAnagrams"
			],
			[
				"max",
				"maxRoad"
			],
			[
				"fl",
				"following"
			],
			[
				"h",
				"head"
			],
			[
				"del",
				"deleteNode"
			],
			[
				"v",
				"value"
			],
			[
				"F",
				"Fraction"
			],
			[
				"V",
				"Vector1"
			],
			[
				"Ve",
				"Vector1"
			],
			[
				"Vec",
				"Vector1"
			],
			[
				"sta",
				"static"
			],
			[
				"stu",
				"student_list"
			],
			[
				"st",
				"student_list"
			],
			[
				"g",
				"gpa"
			],
			[
				"S",
				"Student_list"
			],
			[
				"Stu",
				"Student_list"
			],
			[
				"he",
				"height_res"
			],
			[
				"sq",
				"sqc2"
			],
			[
				"va",
				"values"
			],
			[
				"da",
				"data"
			],
			[
				"pu",
				"push_back"
			],
			[
				"pop_",
				"pop_back"
			],
			[
				"St",
				"Stack_leetcode_155"
			],
			[
				"re",
				"reverse"
			],
			[
				"q",
				"Queue"
			],
			[
				"Tim",
				"Time_out"
			],
			[
				"tim",
				"time_in"
			],
			[
				"tin",
				"time_in"
			],
			[
				"DF",
				"DFS_chu_trinh"
			],
			[
				"nh",
				"nhap1"
			],
			[
				"canh_",
				"canh_cau_1"
			],
			[
				"vi",
				"visited_2_chieu"
			],
			[
				"pa",
				"parent"
			],
			[
				"dele",
				"deleteNodeRepeat"
			],
			[
				"sor",
				"sortNode"
			],
			[
				"fi",
				"findMidle"
			],
			[
				"fin",
				"findNode"
			],
			[
				"de",
				"delete"
			],
			[
				"size",
				"sizeNode"
			],
			[
				"pus",
				"push_back"
			],
			[
				"u",
				"used"
			],
			[
				"ue",
				"usage"
			],
			[
				"pr",
				"precision"
			],
			[
				"su",
				"student_list"
			],
			[
				"Co",
				"Complex"
			],
			[
				"bi",
				"bits1"
			],
			[
				"bit",
				"bits"
			],
			[
				"i",
				"include"
			],
			[
				"us",
				"used"
			],
			[
				"io",
				"iomanip"
			],
			[
				"nu",
				"num_character"
			],
			[
				"num",
				"num_number"
			],
			[
				"M",
				"MAX_B"
			],
			[
				"to",
				"totalLeg"
			],
			[
				"str",
				"start"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/TreeNode.h",
			"settings":
			{
				"buffer_size": 217,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAAKQAAAAAAAAApAAAAAAAAAAZAAAAaW50IG1haW4oKSB7CglyZXR1cm4gMDsKfaMAAAAAAAAAowAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAvQAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAGsAAAAAAAAAbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAJIAAAAAAAAAkgAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAJIAAAAAAAAAkgAAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACmAAAAI2luY2x1ZGUgPGlvc3RyZWFtPgp1c2luZyBuYW1lc3BhY2Ugc3RkOwpjbGFzcyBUcmVlTm9kZSB7CglwdWJsaWM6CgkJaW50IHZhbDsKCQlUcmVlTm9kZSAqbGVmdDsKCQlUcmVlTm9kZSAqcmlnaHQ7CgoJCVRyZWVOb2RlIChpbnQgdmFsKSB7CgkJCXRoaXMtPnZhbCA9IHZhbDsKCQl9Cgp9OwAAAAAAAAAA2QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/Test.cpp",
			"settings":
			{
				"buffer_size": 160,
				"line_ending": "Windows",
				"name": "Test.cpp"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "TR"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAEAAAAAAAAAAQAAAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "est.cpp"
					},
					"BwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGVzdC5jcHA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgAAAAAAAAACQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAAkAAAAAAAAACwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "iostream"
					},
					"CAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\nusing"
					},
					"BgAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " name"
					},
					"BQAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " space"
					},
					"BgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					6,
					"left_delete",
					null,
					"BgAAACMAAAAAAAAAIwAAAAAAAAABAAAAZSIAAAAAAAAAIgAAAAAAAAABAAAAYyEAAAAAAAAAIQAAAAAAAAABAAAAYSAAAAAAAAAAIAAAAAAAAAABAAAAcB8AAAAAAAAAHwAAAAAAAAABAAAAcx4AAAAAAAAAHgAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "spcae"
					},
					"BQAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					4,
					"left_delete",
					null,
					"BAAAACMAAAAAAAAAIwAAAAAAAAABAAAAICIAAAAAAAAAIgAAAAAAAAABAAAAZSEAAAAAAAAAIQAAAAAAAAABAAAAYSAAAAAAAAAAIAAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ace"
					},
					"AwAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAACQAAAAAAAAAJAAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "std;"
					},
					"BAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\nint"
					},
					"BAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " main"
					},
					"BQAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADMAAAAAAAAANAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADQAAAAAAAAANgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n#include"
					},
					"CgAAABMAAAAAAAAAFAAAAAAAAAAAAAAANwAAAAAAAAA3AAAAAAAAAAEAAAAJFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAB0AAAAAAAAAHwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "Mu"
					},
					"AgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAB8AAAAAAAAAHwAAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "Bina"
					},
					"BAAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "ryTree"
					},
					"BgAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ".h"
					},
					"AgAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"reindent",
					null,
					"AQAAAFAAAAAAAAAAUQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "MyBi"
					},
					"BAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "any"
					},
					"AwAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					3,
					"left_delete",
					null,
					"AwAAAFcAAAAAAAAAVwAAAAAAAAABAAAAeVYAAAAAAAAAVgAAAAAAAAABAAAAblUAAAAAAAAAVQAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "naryTr"
					},
					"BgAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "ee"
					},
					"AgAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwAAAAAAAABbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					2,
					"left_delete",
					null,
					"AgAAAF8AAAAAAAAAXwAAAAAAAAABAAAAIF4AAAAAAAAAXgAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " myTr"
					},
					"BQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "ee"
					},
					"AgAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwAAAAAAAABjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQAAAAAAAABlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAABpAAAAAAAAAGoAAAAAAAAAAAAAAGoAAAAAAAAAawAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " My"
					},
					"AwAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_completion",
					{
						"completion": "MyBinaryTree",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "MyBinaryTree"
					},
					"AgAAAGwAAAAAAAAAbAAAAAAAAAACAAAATXlsAAAAAAAAAHgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHgAAAAAAAAAegAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAF4AAAAAAAAAXgAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\nm"
					},
					"AgAAAHsAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert_completion",
					{
						"completion": "myTree",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "myTree"
					},
					"AgAAAH0AAAAAAAAAfQAAAAAAAAACAAAAbXl9AAAAAAAAAIMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ".init"
					},
					"BQAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"left_delete",
					null,
					"AQAAAIMAAAAAAAAAgwAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAIkAAAAAAAAAiQAAAAAAAAADAAAAKCkugwAAAAAAAACDAAAAAAAAAAIAAAAtPg",
					"AQAAAAAAAAACAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/jAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AgAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/hwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAIMAAAAAAAAAgwAAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAAAAI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSAiTXlCaW5hcnlUcmVlLmgiCnVzaW5nIG5hbWVzcGFjZSBzdGQ7CmludCBtYWluKCkgewoJTXlCaW5hcnlUcmVlKiBteVRyZWUgPSBuZXcgTXlCaW5hcnlUcmVlKCk7CglteVRyZWUtPmluaXQoKTsKfQAAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/MyBinaryTree.h",
			"settings":
			{
				"buffer_size": 468,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAFEBAAAAAAAAUQEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAUgEAAAAAAABSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQEAAAAAAABRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAJABAAAAAAAAkAEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAkQEAAAAAAACRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAHEBAAAAAAAAcQEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAcgEAAAAAAAByAQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAHEBAAAAAAAAcgEAAAAAAAAAAAAAcgEAAAAAAABzAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQEAAAAAAABxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAGABAAAAAAAAYAEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAYQEAAAAAAABhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAGABAAAAAAAAYQEAAAAAAAAAAAAAYQEAAAAAAABiAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAEAAAAAAABgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAIIBAAAAAAAAgwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggEAAAAAAACCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					2,
					"left_delete",
					null,
					"AgAAAIIBAAAAAAAAggEAAAAAAAABAAAALYEBAAAAAAAAgQEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAgwEAAAAAAACDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAIEBAAAAAAAAggEAAAAAAAAAAAAAggEAAAAAAACDAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQEAAAAAAACBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHYAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "My"
					},
					"AgAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "MyBinaryTree",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "MyBinaryTree"
					},
					"AgAAAHgAAAAAAAAAeAAAAAAAAAACAAAATXl4AAAAAAAAAIQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIQAAAAAAAAAhgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIcAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAMYAAAAAAAAAxgAAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAOcAAAAAAAAA5wAAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAA6AAAAAAAAADoAAAAAAAAAAAAAAAA4GRA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAAAgBAAAAAAAACAEAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAACQEAAAAAAAAJAQAAAAAAAAAAAAAA4GRA"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAgBAAAAAAAACQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAEAAAAAAAAIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAACkBAAAAAAAAKQEAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAACkBAAAAAAAAKgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAEoBAAAAAAAASgEAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAA4GRA"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAEoBAAAAAAAASwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgEAAAAAAABKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAKMAAAAAAAAApAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "*\\\\"
					},
					"AwAAAMYAAAAAAAAAxwAAAAAAAAAAAAAAxwAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAwGJA"
				],
				[
					57,
					3,
					"left_delete",
					null,
					"AwAAAMgAAAAAAAAAyAAAAAAAAAABAAAAXMcAAAAAAAAAxwAAAAAAAAABAAAAXMYAAAAAAAAAxgAAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAMUAAAAAAAAAxgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAAkBAAAAAAAACgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQEAAAAAAAAJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAACsBAAAAAAAALAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwEAAAAAAAArAQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAE0BAAAAAAAATgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAIkAAAAAAAAAiQAAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAGcAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADCAQAAI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSAiVHJlZU5vZGUuaCIKdXNpbmcgbmFtZXNwYWNlIHN0ZDsKY2xhc3MgTXlCaW5hcnlUcmVlIHsKcHJpdmF0ZToJCglUcmVlTm9kZSogcm9vdDsKCnB1YmxpYzoKCU15QmluYXJ5VHJlZSgpIHt9Cgl2b2lkIGluaXQoKSB7CgkJVHJlZU5vZGUqIG4wID0gbmV3IFRyZWVOb2RlKDApOwoJCVRyZWVOb2RlKiBuMSA9IG5ldyBUcmVlTm9kZSgxKTsKCQlUcmVlTm9kZSogbjIgPSBuZXcgVHJlZU5vZGUoMik7CgkJVHJlZU5vZGUqIG4zID0gbmV3IFRyZWVOb2RlKDMpOwoJCVRyZWVOb2RlKiBuNCA9IG5ldyBUcmVlTm9kZSg0KTsKCQlUcmVlTm9kZSogbjUgPSBuZXcgVHJlZU5vZGUoNSk7CgoJCW4wLT5sZWZ0ID0gbjE7IG4wLT5yaWdodCA9IG4yOwoJCW4xLT5sZWZ0ID0gbjM7IG4xLT5yaWdodCA9IG40OwoJCW4yLT5yaWdodCA9IG41OwoKCX0KCn07AAAAAAAAAADUAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/Graph.cpp",
			"settings":
			{
				"buffer_size": 5660,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			],
			[
				"Snippet: bla",
				"Snippet: bs3-button-toolbar"
			],
			[
				"Snippet: ",
				"Snippet: main()"
			],
			[
				"",
				"PackageResourceViewer: Open Resource"
			],
			[
				"package control in",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"packageR",
				"PackageResourceViewer: Open Resource"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				" install package control",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Local Dependency"
			],
			[
				"packagere",
				"Package Control: Install Package"
			],
			[
				"package control: insall package",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 214.4,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/Nam 2 ky 1/DSA/CodeC++/Tree/MyBinaryTree.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/Tree/TreeNode.cpp",
		"/C/Downloads/24020094_PhamNgocDung-2.txt",
		"/C/Users/Media Mart/OneDrive/Desktop/Năm 2 Kì 1/Database/MySQLCourse/CoQuynh/Buổi 3/Bài hướng dẫn số 3_Select_Where_And_Or_IsNull_Distinct_Limit.txt",
		"/C/Users/Media Mart/AppData/Local/Temp/6c87496d-ccca-4de3-afb9-e3387cec2d57_file.zip.d57/lib/domains/vn/edu/vnu.txt",
		"/D/Nam 2 ky 1/Code_Java/Arkanoid/Process/skeletonWEEK2.txt",
		"/D/Nam 2 ky 1/Bronchscopy/ComputerVisionOCV/detect_faces_cam.py",
		"/D/Nam 2 ky 1/Bronchscopy/ComputerVisionOCV/detect_faces_image.py",
		"/D/Nam 2 ky 1/Bronchscopy/test_mask.py",
		"/D/Nam 2 ky 1/Bronchscopy/ComputerVisionOCV/CVonPicture.py",
		"/D/Nam 2 ky 1/Bronchscopy/test_back_up_2.py",
		"/D/Nam 2 ky 1/Bronchscopy/Test_backup.py",
		"/D/Nam 2 ky 1/Bronchscopy/Model.py",
		"/D/Nam 2 ky 1/Bronchscopy/make_masks_pillow.py",
		"/D/Nam 2 ky 1/DSA/CodeC++/hashMap.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/setTemplate.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/mapTemplate.cpp",
		"/C/Downloads/code_vs_file_unified.diff",
		"/C/Downloads/fileOutput.txt",
		"/C/Downloads/codeOutput.txt",
		"/C/Downloads/fileInput (1).txt",
		"/D/Nam 2 ky 1/DSA/CodeC++/Queue.cpp",
		"/D/Nam 2 ky 1/Bronchscopy/train_joint_ESFPNet_Lung_lesions_baseline.py",
		"/D/Nam 2 ky 1/OOP/Tuần 2/skeletonWEEK2.txt",
		"/D/Nam 2 ky 1/OOP/Arkanoid.txt",
		"/D/Nam 2 ky 1/DSA/CodeC++/1.out",
		"/D/Nam 2 ky 1/DSA/CodeC++/1.inp",
		"/D/Nam 2 ky 1/DSA/CodeC++/matrix.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Bai5.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/stackByLikedlist.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Queue_linked_list.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Bai2.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Bai1.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment1/Bai2.cpp",
		"/C/Downloads/fileInput.txt",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/1.out",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/1.inp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Bai4.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/test.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/spirallyTraverse_Matrix.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/sinhNhiPha.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment2/Bai3.cpp",
		"/D/Nam 2 ky 1/DSA/CodeC++/Array.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment1/1.out",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment1/1.inp",
		"/C/Users/Media Mart/AppData/Local/Temp/7dce3c9a-e202-492a-bd60-d936d784d6b2_24020094_Pham Ngoc Dung-1 (1).zip.6b2/24020094_Pham Ngoc Dung/Bai2.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/51201fcb-f095-47dd-ac26-75a7f9e1e74e_24020094_Pham Ngoc Dung.zip.74e/24020094_Pham Ngoc Dung/Bai2.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment1/24020094_Pham Ngoc Dung.zip",
		"/D/Nam 2 ky 1/DSA/Assignment/Assignment1/24020094_Pham Ngoc Dung_ver2.zip",
		"/D/Nam 2 ky 1/DSA/Slides/Lecture 2/Ontap.aux",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/1.out",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/1.inp",
		"/D/Nam 2 ky 1/Set Up DSB/mysqlsampledatabase/24020094_PhamNgocDung.txt",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/flood_fill.cpp",
		"/C/Downloads/hello_world",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/spirallyTraverse_Matrix.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment1/Bai3.cpp",
		"/D/Nam 2 ky 1/Bronchscopy/mask.py",
		"/D/Nam 2 ky 1/Bronchscopy/import cv2",
		"/D/Nam 2 ky 1/DSA/Assignment1/1.out",
		"/D/Nam 2 ky 1/DSA/Assignment1/1.inp",
		"/D/Nam 2 ky 1/DSA/Assignment1/Bai5.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/1a4ecac1-6881-4b97-9eff-1e65689714b0_24020094_Pham Ngoc Dung-1.zip.4b0/24020094_Pham Ngoc Dung/Bai1.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/1516eeb2-98a2-430a-9e40-afd14d572654_24020094_Pham Ngoc Dung-1.zip.654/24020094_Pham Ngoc Dung/Bai2.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/eb4c4d51-4902-487d-9b8e-eab58f1c8a11_24020094_Pham Ngoc Dung-1.zip.a11/24020094_Pham Ngoc Dung/Bai5.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/641f6455-b68b-4b5b-a56f-c440cad6dd99_24020094_Pham Ngoc Dung-1.zip.d99/24020094_Pham Ngoc Dung/Bai3.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/18172d97-c6ee-4b8b-9e2a-4d89b9d442ca_24020094_Pham Ngoc Dung-1.zip.2ca/24020094_Pham Ngoc Dung/Bai5.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/3b7636dc-cc3c-4cb7-9a9a-d5b9054870fc_24020094_Pham Ngoc Dung-1.zip.0fc/24020094_Pham Ngoc Dung/Bai4.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment1/24020094_Pham Ngoc Dung/Bai5.cpp",
		"/C/Users/Media Mart/AppData/Local/Temp/a0e8f1eb-c6ef-4f3a-82a4-3da10b932652_24020094_Pham Ngoc Dung_ver2.zip.652/24020094_Pham Ngoc Dung/Bai5.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/test3/test3.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment1/Bai4.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment1/Bai2.cpp",
		"/D/Nam 2 ky 1/DSA/Assignment1/Bai1.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/DSA.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/Queue.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/Array.cpp",
		"/D/Nam 2 ky 1/Bronchscopy/bronchoscopy_nsd/README.md",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/Queue",
		"/C/Users/Media Mart/AppData/Local/Temp/063f8674-ec73-43f6-a8d4-e107fd1cea06_mysqlsampledatabase.zip.a06/mysqlsampledatabase.sql",
		"/C/Users/Media Mart/OneDrive/Desktop/Năm 2 Kì 1/Database/MySQLCourse/CoQuynh/Buổi 1/Bài tập buổi 1_Create_Show_Use_Drop_Delete_Truncate.txt",
		"/C/Users/Media Mart/AppData/Roaming/Sublime Text/Packages/User/PythonClean.sublime-build",
		"/C/Users/Media Mart/OneDrive/Desktop/Năm 2 Kì 1/Database/MySQLCourse/HHHHH.txt",
		"/D/Nam 2 ky 1/Code_Java/BTL/sql",
		"/C/Users/Media Mart/OneDrive/Desktop/Twopointer-hk1-2024/cpp_.cpp",
		"/D/Nam 2 ky 1/Pretrained/mit_b0.pth",
		"/D/Nam 2 ky 1/Bronchscopy/bronchoscopy_nsd/requirements.txt",
		"/D/Nam 2 ky 1/Bronchscopy/bronchoscopy_nsd/LICENSE.txt",
		"/D/Code_Python/AggressiveCow.py",
		"/D/Code_Python/Kthmissing.py",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/sinhNhiPha.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/SinhHoanVi.cpp",
		"/D/Code_Python/KmissingVer2.py",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/reverse.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/linkedList.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/Linked_list.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/linkedlistver2.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/LinkList.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/hello.py",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/heelo.py",
		"/D/Code_Python/KMP.py",
		"/D/Code_Python/Kthmissing.py.txt",
		"/D/Nam 2 ky 1/MS/Dev/password.py",
		"/D/Tai Lieu/HelLo_World.txt",
		"/D/Code_Python/Test.py",
		"/D/Code_Python/testW3C3.py",
		"/D/Code_Python/MiniBatchNorm.py",
		"/D/Code_Python/GradientDescent_BatchNorm.py",
		"/D/Code_Python/LogisticRegression–Mini-batchGD.py",
		"/D/Code_Python/LinearRegression–BatchGradientDescent.py",
		"/D/Code_Python/scaleLearning_rate.py",
		"/D/Code_Python/setUpMT.py",
		"/D/Code_Python/lowerUpper.py",
		"/D/Code_Python/countInversions.py",
		"/D/Code_Python/CountingSort.py",
		"/D/Code_Python/test_tf.py",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/QuickSort.cpp",
		"/D/Code_Python/QuickSort.py",
		"/D/Code_Python/MergeSort.py",
		"/D/2024ky2/LTNC/Gen/main.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/DSA/KMP.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/PrefixSum.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/Thidau.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/SumOfSubSets.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/QHD/LCS.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/test.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/leetcode22.cpp",
		"/C/Users/Media Mart/OneDrive/Desktop/baitap/dem tan so/KMP.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 622.4,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Khong tim thay anh cho object_id='finding' trong",
			"object_id",
			"draw_mask_for_image",
			"is_TTKV_label",
			"overlay",
			"best_match_image",
			"process_one_patient",
			"patient_dir",
			"is_ttkv_label_id\n",
			"import csv\nimport json\nimport re\nfrom pathlib import Path\nfrom PIL import Image, ImageDraw, ImageOps\n\n# ---- đường dẫn gốc (sửa cho đúng máy của bạn) ----\nDATA_ROOT = Path(r\"/media/ailab/My Passport/KC4.0_Final_data_upload_onedrive/Nhom_benh\")\nLABELS_ROOT = Path(r\"/media/ailab/My Passport/KC4.0_Final_data_upload_onedrive/nhom_benh_bosung_6\")\nLABELS_JSON = LABELS_ROOT / \"labels.json\"\n\n# ================== LABEL INDEX ==================\ndef build_label_index(labels_json_path: Path):\n    \"\"\"Trả về 4 dict: id2name, id2short, id2path, id2group từ labels.json.\"\"\"\n    with open(labels_json_path, \"r\", encoding=\"utf-8\") as f:\n        labels = json.load(f)\n\n    id2name, id2short, id2path, id2group = {}, {}, {}, {}\n\n    def walk(nodes, group, parent_path=\"\"):\n        if not nodes:\n            return\n        for it in nodes:\n            lid   = it.get(\"id\")\n            name  = it.get(\"name\", \"\")\n            sname = it.get(\"short_name\", \"\")\n            path  = (parent_path + \" / \" if parent_path else \"\") + name\n            if lid:\n                id2name[lid]  = name\n                id2short[lid] = sname\n                id2path[lid]  = path\n                id2group[lid] = group\n            walk(it.get(\"sub_labels\"), group, path)\n\n    walk(labels.get(\"FINDING\", []),   \"FINDING\")\n    walk(labels.get(\"IMPRESSION\", []),\"IMPRESSION\")\n    return id2name, id2short, id2path, id2group\n\ndef labels_from_ids(label_ids, id2name, id2short, id2path, id2group):\n    \"\"\"Chuyển list label_ids → các chuỗi dễ đọc/lọc để ghi CSV.\"\"\"\n    if not label_ids:\n        label_ids = []\n    if isinstance(label_ids, str):\n        label_ids = [label_ids]\n    names  = [id2name.get(i, \"\")  for i in label_ids]\n    shorts = [id2short.get(i, \"\") for i in label_ids]\n    paths  = [id2path.get(i, \"\")  for i in label_ids]\n    groups = [id2group.get(i, \"\") for i in label_ids]\n    return {\n        \"label_ids\":        \"|\".join(label_ids),\n        \"label_names\":      \"|\".join([n for n in names if n]),\n        \"label_shortnames\": \"|\".join([s for s in shorts if s]),\n        \"label_paths\":      \"|\".join([p for p in paths if p]),\n        \"label_groups\":     \"|\".join([g for g in groups if g]),\n    }\n\n# ================== MASK/OVERLAY ==================\ndef load_annotations(json_path):\n    with open(json_path, \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    return data.get(\"findings\", data)\n\ndef is_normalized(points):\n    inside = sum(0.0 <= p[\"x\"] <= 1.0 and 0.0 <= p[\"y\"] <= 1.0 for p in points)\n    return inside >= 0.8 * len(points)\n\ndef to_pixel_points(points, w, h):\n    if is_normalized(points):\n        pts = [(p[\"x\"] * w, p[\"y\"] * h) for p in points]\n    else:\n        pts = [(p[\"x\"], p[\"y\"]) for p in points]\n    return [(int(round(x)), int(round(y))) for x, y in pts]\n\ndef best_match_image(img_dir: Path, object_id: str):\n    imgs = list(img_dir.glob(\"*.*\"))\n    cand, oid = [], object_id.strip()\n    for p in imgs:\n        stem = p.stem\n        if stem == oid:\n            return p\n        if stem in oid or oid in stem:\n            cand.append((len(stem), p))\n    if cand:\n        cand.sort(reverse=True)\n        return cand[0][1]\n    return None\n\ndef draw_mask_for_image(image_path: Path, polygons, out_path: Path):\n    im = Image.open(image_path).convert(\"RGB\")\n    w, h = im.size\n    mask = Image.new(\"L\", (w, h), 0)\n    draw = ImageDraw.Draw(mask, \"L\")\n    for poly in polygons:\n        pts = to_pixel_points(poly, w, h)\n        if len(pts) >= 3:\n            draw.polygon(pts, outline=255, fill=255)\n    mask = mask.point(lambda v: 255 if v > 0 else 0, mode=\"L\")\n    out_path.parent.mkdir(parents=True, exist_ok=True)\n    mask.save(out_path)\n\ndef overlay(image_path, mask_path, out_path, alpha=0.5):\n    out_path = Path(out_path)\n    out_path.parent.mkdir(parents=True, exist_ok=True)\n    im = Image.open(image_path).convert(\"RGB\")\n    mk = Image.open(mask_path).convert(\"L\")\n    if mk.size != im.size:\n        mk = mk.resize(im.size, Image.NEAREST)\n    color = Image.new(\"RGB\", im.size, (0, 255, 0))\n    over = Image.composite(color, im, mk)\n    Image.blend(im, over, alpha).save(out_path)\n\n# ================== PIPELINE ==================\ndef _sanitize(s: str) -> str:\n    return re.sub(r\"[^A-Za-z0-9_\\-]+\", \"_\", s.strip().replace(\" \", \"_\"))\n\ndef process_one_patient(\n    patient_dir: Path,\n    rows_for_csv: list,\n    make_overlay=True,\n    id2name=None, id2short=None, id2path=None, id2group=None,\n):\n    \"\"\"Vẽ mask/overlay cho 1 bệnh nhân và ghi 1 dòng mapping/ảnh kèm nhãn.\"\"\"\n    id2name  = id2name  or {}\n    id2short = id2short or {}\n    id2path  = id2path  or {}\n    id2group = id2group or {}\n\n    json_files = list(patient_dir.glob(\"*.json\"))\n    assert json_files, f\"Không thấy file JSON trong {patient_dir}\"\n    ann_path = json_files[0]\n\n    img_dir = patient_dir / \"imgs\"\n    assert img_dir.exists(), f\"Không thấy thư mục imgs trong {patient_dir}\"\n\n    findings = load_annotations(ann_path)\n\n    # Gom theo object_id: polygons + hợp nhất label_ids\n    by_oid = {}\n    for f in findings:\n        oid = (f.get(\"object_id\") or \"\").strip()\n        pts = f.get(\"data\", [])\n        if not oid or len(pts) < 3:\n            continue\n        pack = by_oid.setdefault(oid, {\"polys\": [], \"label_ids\": set()})\n        pack[\"polys\"].append(pts)\n        for lid in (f.get(\"label_ids\") or []):\n            pack[\"label_ids\"].add(lid)\n\n    out_mask_dir = patient_dir / \"masks\"\n    out_overlay_dir = patient_dir / \"overlays\"\n    out_mask_dir.mkdir(parents=True, exist_ok=True)\n    if make_overlay:\n        out_overlay_dir.mkdir(parents=True, exist_ok=True)\n\n    count_drawn = 0\n    for oid, pack in by_oid.items():\n        polygons  = pack[\"polys\"]\n        label_ids = sorted(pack[\"label_ids\"])\n        img_path = best_match_image(img_dir, oid)\n        if not img_path:\n            print(f\"[WARN] Không tìm thấy ảnh cho object_id='{oid}' trong {img_dir}\")\n            continue\n\n        safe_oid   = _sanitize(oid)\n        image_stem = img_path.stem\n        mask_name  = f\"{safe_oid}__{image_stem}_mask.png\" if safe_oid != image_stem else f\"{image_stem}_mask.png\"\n        ov_name    = f\"{safe_oid}__{image_stem}_overlay.png\" if safe_oid != image_stem else f\"{image_stem}_overlay.png\"\n\n        out_mask = out_mask_dir / mask_name\n        draw_mask_for_image(img_path, polygons, out_mask)\n        count_drawn += 1\n\n        out_ov = \"\"\n        if make_overlay:\n            out_ov = out_overlay_dir / ov_name\n            overlay(img_path, out_mask, out_ov, alpha=0.4)\n\n        # ánh xạ nhãn\n        meta = labels_from_ids(label_ids, id2name, id2short, id2path, id2group)\n\n        rows_for_csv.append({\n            \"patient\": patient_dir.name,\n            \"object_id\": oid,\n            \"image_id\": image_stem,\n            \"image_path\": str(img_path),\n            \"mask_path\": str(out_mask),\n            \"overlay_path\": str(out_ov) if out_ov else \"\",\n            **meta,\n        })\n\n    print(f\"[OK] {patient_dir.name}: {count_drawn} mask\")\n\ndef process_dataset(root: Path, rows_for_csv: list, make_overlay=True,\n                    id2name=None, id2short=None, id2path=None, id2group=None):\n    patients = [p for p in root.iterdir() if p.is_dir()]\n    for p in patients:\n        try:\n            process_one_patient(\n                p, rows_for_csv,\n                make_overlay=make_overlay,\n                id2name=id2name, id2short=id2short, id2path=id2path, id2group=id2group\n            )\n        except AssertionError as e:\n            print(f\"[SKIP] {p.name}: {e}\")\n\ndef write_index_csv(csv_path: Path, rows: list):\n    csv_path.parent.mkdir(parents=True, exist_ok=True)\n    fields = [\n        \"patient\",\"object_id\",\"image_id\",\"image_path\",\"mask_path\",\"overlay_path\",\n        \"label_ids\",\"label_names\",\"label_shortnames\",\"label_paths\",\"label_groups\"\n    ]\n    with open(csv_path, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n        w = csv.DictWriter(f, fieldnames=fields)\n        w.writeheader(); w.writerows(rows)\n    print(f\"[INFO] Đã ghi mapping: {csv_path} (rows={len(rows)})\")\n\n# ================== MAIN (ví dụ test 1 bệnh nhân) ==================\nif __name__ == \"__main__\":\n    # 1) Đọc labels.json 1 lần\n    id2name, id2short, id2path, id2group = build_label_index(LABELS_JSON)\n\n    # 2) Test một bệnh nhân bất kỳ\n    patient_name = \"3. BNA003\"   # đổi tên theo nhu cầu\n    patient_dir = DATA_ROOT / patient_name\n\n    rows = []\n    process_one_patient(\n        patient_dir,\n        rows_for_csv=rows,\n        make_overlay=True,\n        id2name=id2name, id2short=id2short, id2path=id2path, id2group=id2group\n    )\n\n    # 3) (tuỳ chọn) ghi CSV chỉ cho bệnh nhân này\n    out_csv = DATA_ROOT / f\"index_test_{patient_name.replace(' ', '_')}.csv\"\n    write_index_csv(out_csv, rows)\n\n    # 4) (chạy cả bộ) — bỏ comment nếu muốn chạy toàn bộ:\n    # rows_all = []\n    # process_dataset(\n    #     DATA_ROOT, rows_for_csv=rows_all, make_overlay=True,\n    #     id2name=id2name, id2short=id2short, id2path=id2path, id2group=id2group\n    # )\n    # write_index_csv(DATA_ROOT / \"index_masks_overlays.csv\", rows_all)\n",
			"3 379 388",
			"+3 379 388",
			"2 23 222\n2 71 271\n2 108 827\n2 120 262\n2 126 160\n2 223 762\n2 234 314\n2 346 619\n2 396 494\n2 487 569\n2 546 671\n2 569 772\n2 581 839\n2 585 699\n2 629 787\n2 668 840\n2 700 758\n3 5 236\n3 8 829\n3 22 586\n3 29 420\n3 99 155\n3 115 189\n3 153 343\n3 157 225\n3 239 276\n3 270 471\n3 306 354\n3 312 868\n3 330 891\n3 362 421\n3 379 807\n3 384 550\n3 408 689\n3 413 786\n3 417 640\n3 475 719\n3 651 751\n4 15 738\n4 33 684\n4 48 839\n4 73 634\n4 75 470\n4 80 881\n4 169 279\n4 174 282\n4 183 440\n4 233 528\n4 285 762\n4 325 517\n4 413 500\n4 422 686\n4 443 504\n4 478 558\n4 501 831\n4 574 842\n4 610 841\n5 50 108\n5 54 424\n5 65 910\n5 71 394\n5 89 343\n5 137 813\n5 155 829\n5 199 231\n5 209 655\n5 218 532\n5 251 705\n5 277 913\n5 283 774\n5 328 724\n5 339 442\n5 409 705\n5 517 766\n5 550 809\n5 601 793\n5 661 670\n5 697 833\n6 32 414\n6 89 597\n6 93 560\n6 155 709\n6 188 695\n6 239 751\n6 288 646\n6 343 793\n6 457 717\n6 485 823\n6 489 836\n6 666 876\n7 29 514\n7 62 839\n7 77 289\n7 198 319\n7 211 895\n7 220 851\n7 342 565\n7 347 605\n7 399 705\n7 433 674\n7 495 796\n7 496 700\n7 571 797\n7 701 908\n7 705 719\n7 786 864\n8 13 708\n8 13 834\n8 51 512\n8 95 449\n8 121 774\n8 129 835\n8 204 778\n8 222 787\n8 345 529\n8 437 741\n8 478 884\n8 542 679\n9 15 339\n9 24 797\n9 57 505\n9 88 912\n9 127 647\n9 135 907\n9 151 691\n9 161 184\n9 207 648\n9 235 899\n9 241 402\n9 258 424\n9 263 490\n9 283 317\n9 377 491\n9 410 928\n9 512 837\n9 515 532\n9 597 793\n9 627 868\n9 694 713\n9 724 815\n10 36 896\n10 83 783\n10 120 559\n10 137 652\n10 203 292\n10 240 724\n10 306 514\n10 475 727\n10 550 567\n10 582 778\n10 610 766\n11 25 259\n11 90 491\n11 108 227\n11 113 385\n11 119 736\n11 155 285\n11 197 826\n11 206 634\n11 233 588\n11 303 916\n11 344 584\n11 360 875\n11 366 768\n11 375 840\n11 381 608\n11 423 867\n11 426 907\n11 476 728\n11 481 683\n11 499 837\n11 508 597\n11 524 907\n11 570 841\n11 571 877\n11 783 792\n11 850 925\n12 78 655\n12 90 275\n12 104 687\n12 140 392\n12 143 857\n12 146 385\n12 156 466\n12 181 854\n12 198 304\n12 201 202\n12 266 331\n12 310 543\n12 312 758\n12 328 467\n12 429 445\n12 442 761\n12 453 483\n12 471 583\n12 500 827\n12 529 559\n12 568 738\n12 575 726\n12 849 914\n12 861 912\n13 37 325\n13 73 235\n13 79 101\n13 83 734\n13 84 309\n13 99 860\n13 117 419\n13 162 931\n13 165 487\n13 165 772\n13 218 405\n13 234 759\n13 264 568\n13 291 898\n13 310 780\n13 335 358\n13 351 581\n13 402 592\n13 431 829\n13 535 920\n13 858 923\n14 87 103\n14 354 918\n14 383 813\n14 433 634\n14 558 637\n14 663 695\n14 673 916\n15 56 93\n15 129 489\n15 158 541\n15 176 651\n15 180 589\n15 190 722\n15 199 395\n15 204 800\n15 221 758\n15 239 889\n15 339 750\n15 354 709\n15 366 472\n15 386 613\n15 408 587\n15 485 907\n15 529 827\n15 603 642\n15 649 774\n15 686 716\n15 741 859\n16 76 245\n16 112 786\n16 123 409\n16 124 553\n16 154 892\n16 185 870\n16 220 660\n16 232 439\n16 277 415\n16 317 592\n16 353 360\n16 473 551\n16 578 768\n16 582 883\n16 661 701\n17 24 167\n17 141 891\n17 152 676\n17 252 377\n17 356 900\n17 469 570\n17 572 677\n18 40 71\n18 46 197\n18 61 471\n18 88 816\n18 137 780\n18 157 706\n18 192 872\n18 309 646\n18 346 725\n18 376 737\n18 421 537\n18 435 931\n18 483 588\n18 520 818\n18 538 553\n18 582 792\n18 651 873\n18 735 811\n19 25 627\n19 32 103\n19 33 402\n19 58 115\n19 105 245\n19 124 476\n19 141 435\n19 165 295\n19 189 354\n19 191 878\n19 215 697\n19 253 364\n19 256 465\n19 274 459\n19 280 897\n19 331 771\n19 378 563\n19 382 480\n19 392 626\n19 455 755\n19 492 507\n19 492 917\n19 526 602\n19 601 873\n19 732 749\n20 28 302\n20 53 415\n20 67 103\n20 100 754\n20 105 136\n20 113 905\n20 177 216\n20 178 920\n20 222 249\n20 317 663\n20 439 759\n20 441 590\n20 654 916\n20 819 908\n21 32 521\n21 63 310\n21 72 466\n21 235 306\n21 263 707\n21 273 519\n21 355 850\n21 431 832\n21 484 887\n21 727 931\n21 770 878\n21 860 862\n22 75 794\n22 111 876\n22 122 305\n22 165 472\n22 203 306\n22 239 737\n22 265 329\n22 276 376\n22 320 534\n22 322 731\n22 374 798\n22 453 595\n22 522 929\n22 541 705\n22 569 812\n22 782 872\n22 793 811\n22 853 882\n23 42 680\n23 44 210\n23 95 396\n23 237 816\n23 259 317\n23 265 820\n23 314 540\n23 414 513\n23 470 580\n23 535 639\n23 629 853\n23 689 844\n23 736 831\n23 758 778\n23 765 822\n24 29 276\n24 33 245\n24 34 313\n24 39 629\n24 46 332\n24 56 454\n24 64 469\n24 80 769\n24 113 884\n24 116 754\n24 124 430\n24 128 280\n24 137 224\n24 144 816\n24 170 235\n24 192 269\n24 202 870\n24 272 809\n24 312 408\n24 330 382\n24 345 774\n24 349 649\n24 389 639\n24 431 479\n24 610 758\n24 620 771\n24 672 826\n24 750 797\n24 850 889\n25 75 538\n25 133 207\n25 174 678\n25 235 673\n25 236 560\n25 328 763\n25 390 443\n25 430 843\n25 470 775\n25 607 648\n25 608 801\n25 615 776\n25 660 765\n25 744 756\n26 32 483\n26 34 827\n26 114 544\n26 123 134\n26 127 181\n26 168 533\n26 233 609\n26 240 667\n26 250 751\n26 278 581\n26 333 394\n26 342 605\n26 372 671\n26 574 676\n26 642 665\n27 68 349\n27 100 342\n27 185 918\n27 186 216\n27 231 596\n27 299 614\n27 323 830\n27 356 528\n27 414 491\n27 443 906\n27 459 475\n27 460 716\n27 509 747\n27 564 820\n27 635 691\n27 680 773\n27 682 904\n27 758 827\n27 777 842\n28 34 631\n28 68 633\n28 119 244\n28 124 347\n28 155 291\n28 175 667\n28 252 286\n28 361 829\n28 412 726\n28 523 883\n28 543 896\n28 653 711\n28 682 690\n28 713 786\n29 137 767\n29 167 826\n29 176 418\n29 199 562\n29 202 435\n29 267 886\n29 278 437\n29 307 755\n29 326 666\n29 367 759\n29 417 489\n29 436 786\n29 505 705\n29 538 745\n29 554 651\n29 696 910\n29 770 854\n30 36 758\n30 51 613\n30 115 573\n30 122 870\n30 134 827\n30 141 795\n30 155 251\n30 155 409\n30 156 175\n30 163 637\n30 192 837\n30 231 280\n30 261 863\n30 286 424\n30 288 872\n30 343 915\n30 344 448\n30 367 884\n30 455 538\n30 479 672\n30 517 777\n30 778 911\n31 133 413\n31 192 660\n31 199 842\n31 235 627\n31 315 406\n31 334 575\n31 351 495\n31 382 411\n31 394 455\n31 505 566\n31 647 865\n31 648 930\n31 706 822\n31 826 843\n32 38 660\n32 54 472\n32 55 810"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/TreeNode.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 217,
						"regions":
						{
						},
						"selection":
						[
							[
								148,
								148
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/Test.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 160,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"auto_name": "Test.cpp",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/D/Nam 2 ky 1/DSA/CodeC++/Tree/MyBinaryTree.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 468,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Media Mart/OneDrive/Desktop/baitap/TwoPointer 28tech/Graph.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5660,
						"regions":
						{
						},
						"selection":
						[
							[
								560,
								560
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 258.4,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 209.6
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 136.800003052,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "Packages/User/Task.sublime-build",
	"project": "Ball.sublime-project",
	"replace":
	{
		"height": 52.8
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 267.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
